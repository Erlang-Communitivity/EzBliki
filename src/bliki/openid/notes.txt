
=2008 April 13, Sunday

== Plan ==
* Stub out bliki.openid.auth module, with following funcs
	checkid_immediate(OpenIdServer, Identity, ReturnToUrl) - Response is a YAWS redirect expression
	checkid_setup(OpenIdServer, Identity, ReturnToUrl) - Response is a YAWS redirect expression
	check_authentication(OpenIdServer, OpenIdSignature, SignedOpenIdFields) -
		response is a true or false
		SignedOpenIdFields has form of {FieldName, SignedFieldValue}, where FieldName does NOT
			include the openid. prefix
			
* Notes:
	immediate and setup are redirects
	auth is a POST

* The checkid portion is working and we're being returned to the URL we ask for.
* However we still dont have OpenId integrated
* Need to 
	* add a final_url param in the returnToUrl that directs us back to page we were on when we clicked login
	* implement verify method and if it's successful have it redirect to final URL 
		* It has to spawn new process that maintains authenticated session
		* We set a cookie that stores the session pid
		* On every page request it adds a proplist of [{session.id, SessionPid}] as the Yaws Opaque value
   *** DONT need to spawn new process, use Yaws session server,
 	see  http://yaws.hyber.org/code.yaws?file=/session1.yaws

* Test
 bliki.openid.auth:encode_query_params("http://example.org", [{"openid.return_to", "http://acme.com"}]).

bliki.openid.auth:encode_query_params("http://example.org", [{"openid.return_to", "http://acme.com"},{"openid.mode", "id_res"}]).

= Notes from reading through the spec =

== 4 data formats  through 6 ==

* OpenID messages seem great match for a proplist
* key-form encoding
  * version of message is sequence of lines with \n line end char
  * each line consists of key:value
  * Means keys and values CANNOT contain newlines or colons
  * No white space
  * Must be UTF-8 encoded
  * Elsewhere in the spec they seem to indicate this is URL encoding?
* http-encoding
  * Above must be encoded as form params
  * keys all must be prefixed with openid.
  * Must have these fields (showin quotes in spec, not sure if quotes needed in form encoding
     * openid.ns:http://specs.openid.net/auth/2.0
     * openid.mode: <- this value should be one of 
* They got cute with integers..
* each must be a big-endian signed two's complement binary string
Base 10 number | btwoc string representation
---------------+----------------------------
0              | "\x00"
127            | "\x7F"
128            | "\x00\x80"
255            | "\x00\xFF"
32768          | "\x00\x80\x00"

btwoc is a function in spec that denotes this conversion
* Two types of communication: direct and indirect
* Both are used during authentication
* Direct
  * request: always a HTTP post, with form encoding as specified above
  * Response:
     * http response with body in key-value form
     * content type is text/plain
     * status code of 200 unless there's an error
     * if there's an error...
       * status is 400
       * ns field as prev
       * error field, contains message
       * contact field (optional), a contact address (email or XRI or other)
       * reference field (optional) a reference token (status page, ticket #, etc)
* indirect
   * messages are passed via the user agent, ie you go to RP site, it sends a redirect to OP
   * redirects done by 302,303, or 307 status
   * redirect URL is url of the receiver with the authentication message appended as a url encoded query string
     (see 4.1.2 or above)
   *  5.2.2 is hard to understand, deals with HTML form redirection
* message signing
  * process is MAC std, http://openid.net/specs/openid-authentication-2_0.html#RFC1750
  * list of keys signed are in field openid.signed. The keynames in the list do not include the openid. prefix and are comma separated
  * generate a url encoded string per key-value encoding
  * find the signing alg from the association type http://openid.net/specs/openid-authentication-2_0.html#associations
  * Apply the http://openid.net/specs/openid-authentication-2_0.html#sign_algos
  * Need to support HMAC-SHA1 and HMAC-SHA256
	http://openid.net/specs/openid-authentication-2_0.html#RFC2104
	http://openid.net/specs/openid-authentication-2_0.html#RFC3174
	http://openid.net/specs/openid-authentication-2_0.html#RFC2104
	http://openid.net/specs/openid-authentication-2_0.html#FIPS180-2
	
== 7 initiation and discovery ==
	
* Starts with RP sending a form to the user with a text field named openid_identifier
* When submitted the field's input value is normalized
	* if it starts with xri:// then that is stripped off
	* if it starts with GCS or XREF the type is XRI
	* otherwise type is HTTP
* FOr HTTP types
	* if it doesn't start with http:// or http:// then http:// is prepended
	* if the url contains a fragment it is stripped off along with # char
	* Note that you need to follow redirects if you're dealing with HTTP type

* The discovery process
	* Attempt to get service elements from XRDS document
	* If no service elements found, do HTML-based discovery
	
* Attempting to get service elements, if type is XRI
	* Do XRI resolution to get XRDS
	* collect service elements into list
	* return list (empty if no service elements found)

* Attempting to get service elements, if type is HTTP
	* see YADIS protocol
	
* If no service elements use HTML based discovery
* CUriously, this is the method used by getopenid and myopenid, so it is the first, rather that last that
  should be supported by a library
* these use openid.server, which is OpenID 1.1
<link rel="openid.server" href="http://getopenid.com/action/authenticate/" />	

* Myopenid and yahoo provide the Openid2 version as well as the above:
<link rel="openid2.provider" href="http://www.myopenid.com/server" />

== Once OP URL found, we associate in Sect 8 ==

* Direct request with openid.mode having value of associate
* Parameers:
	openid.ns as before
	openid.mode: associate
	openid.assoc_type  either HMAC-SHA256 or HMAC-SHA1
	openid.session_type no enc (right :), DH-SHA1 or DH-SHA256
	openid.dh_modulus:base64(btwoc(p))
		where p is , in hex,
		DCF93A0B883972EC0E19989AC5A2CE310E1D37717E8D9571BB7623731866E61E
		F75A2E27898B057F9891C2E27A639C3F29B60814581CD3B2CA3986D268370557
		7D45C2E7E52DC81C7A171876E5CEA74B1448BFDFAF18828EFD2519F14E45E382
		6634AF1949E5B535CC829A483B8A76223E5D490A257F05BDFF16F2FB22C583AB
	openid.dh_gen:base64(btwoc(2))  (2 is common default value)
	openid.dh_consumer_public:base64(btwoc(g ^ xa mod p))
	
	
Great blog article on implementing DH in erlang here:
http://diginux.blogspot.com/2006/10/adding-aes-encryption-to-erlang-chat.html

Checked out JUNGerl's ibrowse
To start you must start erl with
erl -boot start_sasl
and also start ibrowse application with
application:start(ibrowse).

You can send do
ibrowse:send_req("http://www.erlang.org", [], head).
and get back
{ok,"200",
    [{"Date","Sat, 05 Apr 2008 16:08:28 GMT"},
     {"Server",
      "Apache/1.3.29 (Unix) PHP/5.1.6 with Suhosin-Patch mod_ssl/2.8.16 OpenSSL/0.9.7j"},
     {"Last-Modified","Fri, 28 Mar 2008 08:32:06 GMT"},
     {"ETag","\"4ef4da42d855386657a6a0e5a2b67f83994adb45\""},
     {"Accept-Ranges","bytes"},
     {"Content-Length","12043"},
     {"Content-Type","text/html"}],
    []}
With myopenid test:
3> ibrowse:send_req("http://prawf.myopenid.com/", [], head).

=PROGRESS REPORT==== 5-Apr-2008::12:12:50 ===
          supervisor: {local,inet_gethost_native_sup}
             started: [{pid,<0.52.0>},{mfa,{inet_gethost_native,init,[[]]}}]

=PROGRESS REPORT==== 5-Apr-2008::12:12:50 ===
          supervisor: {local,kernel_safe_sup}
             started: [{pid,<0.51.0>},
                       {name,inet_gethost_native_sup},
                       {mfa,{inet_gethost_native,start_link,[]}},
                       {restart_type,temporary},
                       {shutdown,1000},
                       {child_type,worker}]
{ok,"200",
    [{"Date","Sat, 05 Apr 2008 16:12:50 GMT"},
     {"Server","Apache/2.2"},
     {"Content-Length","1525"},
     {"Content-Type","text/html; charset=UTF-8"},
     {"X-XRDS-Location","http://prawf.myopenid.com/xrds"},
     {"Connection","close"}],
    []}

Yahoo seems to do it differently, asking people to enter yahoo.com as there openid
url encoding is done with yaws_api:url_encode

So we perform discovery, then send a redirect with the following parameters

http://www.myopenid.com/server?openid.ns=http://specs.openid.net/auth/2.0&openid.mode=checkid_immediate&openid.claimed_id=http://prawf.myopenid.com/&openid.identity=http://prawf.myopenid.com/&openif.return_to=http://example.org





	
	
	
	


